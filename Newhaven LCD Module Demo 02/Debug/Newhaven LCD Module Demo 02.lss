
Newhaven LCD Module Demo 02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b63  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a1  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ad  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	4f d0       	rcall	.+158    	; 0xd2 <main>
  34:	8f c0       	rjmp	.+286    	; 0x154 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <InitPort>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8e 60       	ori	r24, 0x0E	; 14
  3c:	81 bb       	out	0x11, r24	; 17
  3e:	93 9a       	sbi	0x12, 3	; 18
  40:	08 95       	ret

00000042 <SPIInit>:
  42:	19 b8       	out	0x09, r1	; 9
  44:	12 b8       	out	0x02, r1	; 2
  46:	93 b1       	in	r25, 0x03	; 3
  48:	90 6c       	ori	r25, 0xC0	; 192
  4a:	93 b9       	out	0x03, r25	; 3
  4c:	81 30       	cpi	r24, 0x01	; 1
  4e:	49 f0       	breq	.+18     	; 0x62 <SPIInit+0x20>
  50:	28 f0       	brcs	.+10     	; 0x5c <SPIInit+0x1a>
  52:	82 30       	cpi	r24, 0x02	; 2
  54:	49 f0       	breq	.+18     	; 0x68 <SPIInit+0x26>
  56:	83 30       	cpi	r24, 0x03	; 3
  58:	51 f0       	breq	.+20     	; 0x6e <SPIInit+0x2c>
  5a:	0b c0       	rjmp	.+22     	; 0x72 <SPIInit+0x30>
  5c:	18 98       	cbi	0x03, 0	; 3
  5e:	19 98       	cbi	0x03, 1	; 3
  60:	08 c0       	rjmp	.+16     	; 0x72 <SPIInit+0x30>
  62:	18 98       	cbi	0x03, 0	; 3
  64:	19 9a       	sbi	0x03, 1	; 3
  66:	05 c0       	rjmp	.+10     	; 0x72 <SPIInit+0x30>
  68:	19 98       	cbi	0x03, 1	; 3
  6a:	18 9a       	sbi	0x03, 0	; 3
  6c:	02 c0       	rjmp	.+4      	; 0x72 <SPIInit+0x30>
  6e:	18 9a       	sbi	0x03, 0	; 3
  70:	19 9a       	sbi	0x03, 1	; 3
  72:	1a 98       	cbi	0x03, 2	; 3
  74:	88 e0       	ldi	r24, 0x08	; 8
  76:	8a b9       	out	0x0a, r24	; 10
  78:	89 e1       	ldi	r24, 0x19	; 25
  7a:	89 b9       	out	0x09, r24	; 9
  7c:	08 95       	ret

0000007e <SPIWrite>:
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <SPIWrite>
  82:	93 98       	cbi	0x12, 3	; 18
  84:	8c b9       	out	0x0c, r24	; 12
  86:	5e 9b       	sbis	0x0b, 6	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <SPIWrite+0x8>
  8a:	5e 9a       	sbi	0x0b, 6	; 11
  8c:	93 9a       	sbi	0x12, 3	; 18
  8e:	08 95       	ret

00000090 <LCDClearScreen>:
  90:	8e ef       	ldi	r24, 0xFE	; 254
  92:	f5 df       	rcall	.-22     	; 0x7e <SPIWrite>
  94:	81 e5       	ldi	r24, 0x51	; 81
  96:	f3 df       	rcall	.-26     	; 0x7e <SPIWrite>
  98:	8f e9       	ldi	r24, 0x9F	; 159
  9a:	9f e0       	ldi	r25, 0x0F	; 15
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCDClearScreen+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCDClearScreen+0x12>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <LCDMoveDisplayLeft>:
  a6:	8e ef       	ldi	r24, 0xFE	; 254
  a8:	ea df       	rcall	.-44     	; 0x7e <SPIWrite>
  aa:	85 e5       	ldi	r24, 0x55	; 85
  ac:	e8 df       	rcall	.-48     	; 0x7e <SPIWrite>
  ae:	87 ec       	ldi	r24, 0xC7	; 199
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCDMoveDisplayLeft+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCDMoveDisplayLeft+0x12>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <LCDShowFirmwareRev>:
}

void LCDShowFirmwareRev(void)
{
	// Display the firmware revision number on the display
	SPIWrite(0xFE);
  bc:	8e ef       	ldi	r24, 0xFE	; 254
  be:	df df       	rcall	.-66     	; 0x7e <SPIWrite>
	SPIWrite(0x70);
  c0:	80 e7       	ldi	r24, 0x70	; 112
  c2:	dd df       	rcall	.-70     	; 0x7e <SPIWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	9f e1       	ldi	r25, 0x1F	; 31
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <LCDShowFirmwareRev+0xc>
  cc:	00 c0       	rjmp	.+0      	; 0xce <LCDShowFirmwareRev+0x12>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <main>:
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	80 e7       	ldi	r24, 0x70	; 112
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <__stack+0x3>
  e2:	00 00       	nop

int main(void)
{
	_delay_ms(100);		// Delay to allow the display controller to initialize
	
	InitPort();			// Initialize port D I/O
  e4:	a9 df       	rcall	.-174    	; 0x38 <InitPort>
	SPIInit(3);			// Initialize SPI into Mode 3
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	ac df       	rcall	.-168    	; 0x42 <SPIInit>
	
	// Send some commands to the display

	LCDClearScreen();
  ea:	d2 df       	rcall	.-92     	; 0x90 <LCDClearScreen>
	LCDShowFirmwareRev();
  ec:	e7 df       	rcall	.-50     	; 0xbc <LCDShowFirmwareRev>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	81 ee       	ldi	r24, 0xE1	; 225
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__stack+0x15>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__stack+0x1f>
  fe:	00 00       	nop
	
	_delay_ms(200);
	
	LCDClearScreen();
 100:	c7 df       	rcall	.-114    	; 0x90 <LCDClearScreen>

	SPIWrite('H');
 102:	88 e4       	ldi	r24, 0x48	; 72
 104:	bc df       	rcall	.-136    	; 0x7e <SPIWrite>
	SPIWrite('e');
 106:	85 e6       	ldi	r24, 0x65	; 101
 108:	ba df       	rcall	.-140    	; 0x7e <SPIWrite>
	SPIWrite('l');
 10a:	8c e6       	ldi	r24, 0x6C	; 108
 10c:	b8 df       	rcall	.-144    	; 0x7e <SPIWrite>
	SPIWrite('l');
 10e:	8c e6       	ldi	r24, 0x6C	; 108
 110:	b6 df       	rcall	.-148    	; 0x7e <SPIWrite>
	SPIWrite('o');
 112:	8f e6       	ldi	r24, 0x6F	; 111
 114:	b4 df       	rcall	.-152    	; 0x7e <SPIWrite>
	SPIWrite(' ');
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	b2 df       	rcall	.-156    	; 0x7e <SPIWrite>
	SPIWrite('W');
 11a:	87 e5       	ldi	r24, 0x57	; 87
 11c:	b0 df       	rcall	.-160    	; 0x7e <SPIWrite>
	SPIWrite('o');
 11e:	8f e6       	ldi	r24, 0x6F	; 111
 120:	ae df       	rcall	.-164    	; 0x7e <SPIWrite>
	SPIWrite('r');
 122:	82 e7       	ldi	r24, 0x72	; 114
 124:	ac df       	rcall	.-168    	; 0x7e <SPIWrite>
	SPIWrite('l');
 126:	8c e6       	ldi	r24, 0x6C	; 108
 128:	aa df       	rcall	.-172    	; 0x7e <SPIWrite>
	SPIWrite('d');
 12a:	84 e6       	ldi	r24, 0x64	; 100
 12c:	a8 df       	rcall	.-176    	; 0x7e <SPIWrite>
	SPIWrite('!');
 12e:	81 e2       	ldi	r24, 0x21	; 33
 130:	a6 df       	rcall	.-180    	; 0x7e <SPIWrite>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <__stack+0x59>
 140:	00 c0       	rjmp	.+0      	; 0x142 <__stack+0x63>
 142:	00 00       	nop
	
	_delay_ms(200);
	
	while(1)
	{
		LCDMoveDisplayLeft();
 144:	b0 df       	rcall	.-160    	; 0xa6 <LCDMoveDisplayLeft>
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	9c e9       	ldi	r25, 0x9C	; 156
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__stack+0x6b>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <__stack+0x71>
 150:	00 00       	nop
 152:	f8 cf       	rjmp	.-16     	; 0x144 <__stack+0x65>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
